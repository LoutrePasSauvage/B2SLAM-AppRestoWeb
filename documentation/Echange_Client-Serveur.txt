###### 4 états d'une commande : ######

En attente      -> 1
En préparation  -> 2
abandonnée      -> 3
prête           -> 4

--> Ces valeurs sont attribuées au champ id_etat dans la table commande.


###### Explication Echanges entre le Client et le Serveur : ######

Le client envoie une url au serveur.
Cette url, si elle spécifie une commande en particulier, envoie la valeur que doit contenir le champ id_commande de la table commande.
A l'issu de la réception, le serveur fournit un fichier json ciblant la commande ou les commandes en question.

Exemple, dans commandes_en_attente.php, le serveur génère un fichier json qui liste les commandes en attente.
Le fichier json : fichier_exemple.json est l'exemple d'un résultat de la création d'un fichier json par le programme commande_en_attente.php.

Pour accepter, refuser ou terminer : le serveur mettra à jour l'état de la commande pour fournir un fichier json à jour de ce changement d'état.



###### Description fichiers json (API) : ######

### commande_accepter.php : ###

L'url pour accéder au fichier : http://localhost/B2SLAM-AppResto-L-BOUZAC---H-CAILLEBOTTE---S-VERCHERE/API/commande_accepter.php?id_commande=X

X : id de la commande en question
Pour tester la fonctionnalité "accepter" du programme, attribuez à X la valeur de l'id d'une commande ayant un état "en attente", ici ça sera id_etat = 1
Voici la commande SQL pour trouver des commandes en attente :
SELECT * FROM commande WHERE id_etat = 1;

Le programme va sélectionner une commande X qui était en préparation pour lui mettre à jour l'état 'accepter'.
Ce programme généra un fichier json de la commande X avec le nouvel état.

On aura donc le fichier json d'une commande X acceptée.

### commande_refuser.php : ###

L'url pour accéder au fichier : http://localhost/B2SLAM-AppResto-L-BOUZAC---H-CAILLEBOTTE---S-VERCHERE/API/commande_refuser.php?id_commande=X

X : id de la commande en question
Pour tester la fonctionnalité "refuser" du programme, attribuez à X la valeur de l'id d'une commande ayant un état "en attente", ici ça sera id_etat = 1
Voici la commande SQL pour trouver des commandes en attente :
SELECT * FROM commande WHERE id_etat = 1;

Le programme va sélectionner une commande X qui était en préparation pour lui mettre à jour l'état 'refuser'.
Ce programme généra un fichier json de la commande X avec le nouvel état.

On aura donc le fichier json d'une commande X refusée.


### commande_terminer.php : ###

L'url pour accéder au fichier :
http://localhost/projets/B2SLAM-AppResto-L-BOUZAC---H-CAILLEBOTTE---S-VERCHERE/API/commande_terminer.php?id_commande=X

X : id de la commande en question
Pour tester la fonctionnalité du programme, attribuez à X la valeur de l'id d'une commande ayant un état "en préparation", ici ça sera id_etat = 2
Voici la commande SQL pour trouver des commandes en préparation :
SELECT * FROM commande WHERE id_etat = 2;
Sinon mettez à jour une commande à l'état "en préparation" (accepté) grâce à la fonctionnalité accepter du programme commande_accepter.php

Le programme va sélectionner une commande X qui était en préparation pour lui mettre à jour l'état en terminé.
Ce programme généra un fichier json de la commande X avec le nouvel état.

On aura donc le fichier json d'une commande X terminée.


### commandes_en_attente.php : ###

L'url pour accéder au fichier :
http://localhost/projets/B2SLAM-AppResto-L-BOUZAC---H-CAILLEBOTTE---S-VERCHERE/API/commandes_en_attente.php

Ce programme listera toutes les commandes en attentes.
C'est-à-dire l'état en attente, donc champ id_etat = 1 dans la table commande. 

